C51 COMPILER V9.60.7.0   PROJETOEMC                                                        05/25/2025 01:37:28 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE PROJETOEMC
OBJECT MODULE PLACED IN .\Objects\ProjetoEmC.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ProjetoEmC.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\ProjetoEmC.lst) TABS(2) OBJECT(.\Objects\ProjetoEmC.obj)

line level    source

   1          #include <reg51.h>
   2          
   3          //constantes
   4          #define fimTempo 5000  // 5000 *0.20ms = 1s
   5          #define fimTempoBarreira 100// 50 * 0.20ms = 20ms
   6          #define zero 3 // 3 * 0.20ms = 0.6ms 
   7          #define oitenta 6 // 8 * 0.20ms = 1.6ms
   8          
   9          //Pins P0
  10          sbit L0 = P0^0;
  11          sbit L1 = P0^1;
  12          sbit L2 = P0^2;
  13          sbit L3 = P0^3;
  14          sbit L4 = P0^4;
  15          sbit L5 = P0^5;
  16          sbit L6 = P0^6;
  17          sbit L7 = P0^7;
  18          
  19          //Pins P1
  20          sbit ledVerde = P1^0; //pino do led verde
  21          sbit ledVermelho = P1^1; //pino do led vermelho
  22          sbit ledAmarelo = P1^2; //pino do led amarelo
  23          sbit barreira = P1^3; //pino da barreira
  24          sbit sensor = P1^4; //pino do sensor
  25          
  26          //Pins P2
  27          sbit segmentoA = P2^0; //pino do servo A
  28          sbit segmentoB = P2^1; //pino do servo B
  29          sbit segmentoC = P2^2; //pino do servo C
  30          sbit segmentoD = P2^3; //pino do servo D
  31          
  32          //variaveis globais
  33          bit botao = 0; //se o botao estiver a 0 entao e uma entrada se estiver a 1 e uma saida
  34          bit pressionado = 0; //para confirmar se o botao foi pressionado
  35          bit passouCarro = 0; //confirmar se passou o carro
  36          bit bufferPassouCarro = 0;// buffer para confirmar se o carro passou todo
  37          unsigned int conta = 0; //para ajudar a contar 1 segundo
  38          unsigned int contaSegundo = 0; //contador do timer a cada 1s
  39          unsigned int abreBarreira = 0; //para abrir a barreira
  40          unsigned char referenciaBarreira = zero; //referencia da barreira
  41          unsigned char contaBarreira = 0; //contador da barreira
  42          
  43          void Init(void){
  44   1          //configuracao Registo IE
  45   1          EA = 1; //habilita interrupcao global
  46   1          ET0 = 1; //habilita interrupcao do timer 0
  47   1          EX0 = 1; //habilita interrupcao externa 0
  48   1          EX1 = 1; //habilita interrupcao externa 1
  49   1      
  50   1          //configuracao Registo TMOD
  51   1          TMOD &= 0xF0; // limpa os 4 bits do timer 0 (8 bits -auto reload)
  52   1          TMOD |= 0x02; //modo 2 do timer 0
  53   1      
  54   1          //configuracao Timer 0
C51 COMPILER V9.60.7.0   PROJETOEMC                                                        05/25/2025 01:37:28 PAGE 2   

  55   1          TR0 = 1; //inicia o timer 0
  56   1          TH0 = 56; //Inicia para ser 256 -56 = 200ms
  57   1          TL0 = 56; //Inicia para ser 256 -56 = 200ms
  58   1          IT0 = 1;//interrupcao esterna ativa a falling edge
  59   1      
  60   1          //inicializacao do P0
  61   1        //P0 = ~P0;
  62   1        
  63   1          //inicializa o display 
  64   1          P2 = 0x00; //inicializa o display a 0
  65   1      
  66   1          ledVerde = 0; //led verde ligado
  67   1          ledVermelho = 1; //led vermelho desligado
  68   1          ledAmarelo = 1; //led amarelo desligado
  69   1        barreira = 1;//a barreira comeca para baixo
  70   1        //sensor = 1;//inicializa o sensor a 1
  71   1          
  72   1      
  73   1      }
  74          
  75          //interrupcao externa 0
  76          void External0_ISR(void) interrupt 0{
  77   1          botao = 0; //assinala que o botao para entrar foi pressionado
  78   1          pressionado = 1;//foi pressionado
  79   1      }
  80          
  81          //interrupcao externa 1
  82          void External1_ISR(void) interrupt 2{
  83   1          botao = 1; //assinala que o botao para sair foi pressionado
  84   1          pressionado = 1;//foi presionado
  85   1      }
  86          
  87          //interrupcao tempo a cada segundo
  88          void Timer0_ISR(void) interrupt 1{
  89   1          contaBarreira++;
  90   1          conta ++;
  91   1      }
  92          
  93          void display(void){
  94   1          unsigned int Segmentos = 0;
  95   1          if (~L0) {Segmentos += 1;}
  96   1          if (~L1) {Segmentos += 1;}
  97   1          if (~L2) {Segmentos += 1;}
  98   1          if (~L3) {Segmentos += 1;}
  99   1          if (~L4) {Segmentos += 1;}
 100   1          if (~L5) {Segmentos += 1;}
 101   1          if (~L6) {Segmentos += 1;}
 102   1          if (~L7) {Segmentos += 1;}
 103   1          P2 = Segmentos; //atualiza o display
 104   1      }
 105          
 106          void leSensor(){
 107   1          if (sensor == 0){
 108   2              bufferPassouCarro = 1; //se o sensor estiver a 0 entao o carro passou
 109   2          }
 110   1          if (bufferPassouCarro == 1 && sensor == 1){
 111   2                  passouCarro = 1; //se o sensor estiver a 1 entao o carro passou todo
 112   2                  bufferPassouCarro = 0; //reseta o buffer
 113   2          }
 114   1      }
 115          
 116          void moveBarreira(void){
C51 COMPILER V9.60.7.0   PROJETOEMC                                                        05/25/2025 01:37:28 PAGE 3   

 117   1          if (abreBarreira){
 118   2              referenciaBarreira = oitenta; //se o carro passou entao a barreira tem de ir para 80
 119   2      
 120   2              if (contaBarreira == referenciaBarreira){
 121   3                  barreira = 0; //se ja chegou ao sitio certo entao fica igual
 122   3              }
 123   2              if (contaBarreira ==  fimTempoBarreira){
 124   3                  contaBarreira = 0; //reseta o contador da barreira
 125   3                  barreira = 1; //levanta a barreira
 126   3              }
 127   2          }else{
 128   2              referenciaBarreira = zero; //se o carro passou entao a barreira tem de ir para 0
 129   2      
 130   2              if (contaBarreira == referenciaBarreira){
 131   3                  barreira = 0; //se ja chegou ao sitio certo entao fica igual
 132   3              }
 133   2              if (contaBarreira ==  fimTempoBarreira){
 134   3                  contaBarreira = 0; //reseta o contador da barreira
 135   3                  barreira = 1; //baixa a barreira 
 136   3                  //depois testar como e que se baixa a barreira
 137   3              }
 138   2          }
 139   1      }
 140          
 141          void main(void){
 142   1          //inicializacoes
 143   1        Init();
 144   1          while (1){ //loop inifinito
 145   2              display();
 146   2              leSensor();
 147   2              moveBarreira();
 148   2          if (segmentoA || segmentoB || segmentoC || segmentoD){  
 149   3                      ledVerde = 0; //ativa o led verde
 150   3                      ledVermelho = 1; //desliga o led vermelho  
 151   3          } else{
 152   3                      ledVermelho = 0;//ativa o led vermelho
 153   3                      ledVerde = 1; //desliga o led verde
 154   3                      }
 155   2              if (conta == fimTempo){
 156   3                  conta = 0; //volta a contar
 157   3                  if (segmentoA || segmentoB || segmentoC || segmentoD || botao){    
 158   4                      if (pressionado){ //se tiver lugares ou se for para sair
 159   5                          contaSegundo ++; //passou 1 segundo
 160   5                          ledVerde = 0; //ativa o verde
 161   5                          ledVermelho = 1; //desliga o vermelho
 162   5                          ledAmarelo = ~ledAmarelo; //amarelo intermitente
 163   5                          abreBarreira = 1;//levanta a barreira
 164   5                          if (contaSegundo >= 10){//espera ate ser maior que 10 segundos 
 165   6                              if (passouCarro){
 166   7                                  abreBarreira = 0; //baixa a barreira 
 167   7                                  passouCarro = 0; //reseta o carro
 168   7                                  pressionado = 0; //volta a colocar o botao de passou a 0
 169   7                                  contaSegundo = 0; //reseta o timer    
 170   7                                  //sensor = 1; //reseta o sensor 
 171   7                                  ledAmarelo = 1; //desliga o led amareleo              
 172   7                              }
 173   6                          }
 174   5                      }
 175   4                  }
 176   3              }
 177   2          }
 178   1      }
C51 COMPILER V9.60.7.0   PROJETOEMC                                                        05/25/2025 01:37:28 PAGE 4   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    314    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
